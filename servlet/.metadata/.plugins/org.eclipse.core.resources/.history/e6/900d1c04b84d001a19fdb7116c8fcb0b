package com.tyss.inventorymanagement.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.tyss.inventorymanagement.dto.CartInfoBean;
import com.tyss.inventorymanagement.dto.ProductInfoBean;
import com.tyss.inventorymanagement.dto.ProductResponse;
import com.tyss.inventorymanagement.dto.ProperResponse;
import com.tyss.inventorymanagement.dto.UserInfoBean;
import com.tyss.inventorymanagement.service.ProductService;

@RestController
@CrossOrigin(origins = "*",allowCredentials = "true")
public class ProductRestController {
	
	@Autowired 
	private ProductService service;
	

	@PostMapping(path = "/auth", produces = MediaType.APPLICATION_JSON_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse auth(@RequestBody UserInfoBean bean) {

		UserInfoBean infoBean = service.auth(bean.getEmail(), bean.getPassword());
		ProductResponse response = new ProductResponse();
		if (infoBean != null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Valid Credential");
			response.setUserInfoBeans(Arrays.asList(infoBean));
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Invalid Credential");
		}
		return response;
	}

	
	@PostMapping(path = "/register",produces = MediaType.APPLICATION_JSON_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse register(@RequestBody UserInfoBean bean) {

		ProductResponse response = new ProductResponse();
		if (service.register(bean)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Data inserted into the DB");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Data not inserted into the DB");
		}
		return response;

	}

	
	@PostMapping(path = "/add",produces = MediaType.APPLICATION_JSON_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse addProduct(@RequestBody ProductInfoBean bean) {
		ProductResponse response = new ProductResponse();
		if (service.addProduct(bean)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Data inserted into the DB");
			
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Data not inserted into the DB");
		}
		return response;
		
	}
	
	@GetMapping(path = "/delete/{id}",produces = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse removeProduct(@PathVariable("id") int id) {
		ProductResponse response = new ProductResponse();
		if (service.removeProduct(id)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("record deleted Successfuly");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("record  doesn't deleted");
		}
		return response;
		
	}
	
	@PutMapping(path = "/update",produces = MediaType.APPLICATION_JSON_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse updateProduct(@RequestBody ProductInfoBean bean) {
		ProductResponse response = new ProductResponse();
		if (service.updateProduct(bean)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("record deleted Successfuly");
		} else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("record  doesn't deleted");
		}
		return response;
		
	}
	
	@GetMapping(path="/search",produces = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse getProductByName(@RequestParam("name")String name){
		List<ProductInfoBean> beans = service.getProductByName(name);
		ProductResponse response = new ProductResponse();
			if (beans != null && !beans.isEmpty()) {
				response.setStatusCode(201);
				response.setMessage("Success");
				response.setDescription("Data found in DB for the requsted name");
				response.setBeans(beans);
			}else {
				response.setStatusCode(401);
				response.setMessage("Failure");
				response.setDescription("Data not found in DB for the requsted name");
			}
			return response;
	}
	
	
	@GetMapping(path="/searchall",produces = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse getAllProduct() {
		List< ProductInfoBean> beans = service.getAllProduct();
        ProductResponse response = new ProductResponse();
		if (beans != null && !beans.isEmpty()) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("All Data founds");
			response.setBeans(beans);
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Data not found in DB");
		}
		return response;
	}
	
	
	@PostMapping(path = "/order",produces = MediaType.APPLICATION_JSON_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse order(@RequestBody UserInfoBean userInfoBean) {

		ProductResponse response = new ProductResponse();
		if (service.orders(userInfoBean)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Data inserted into the DB");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Data not inserted into the DB");
		}
		return response;

	}
	
//	boolean removeCart(int id);
//	boolean addCart(CartInfoBean cartInfoBean);
//	List<CartInfoBean> getAllCart(int id);
	
	public ProductResponse addCart(@RequestBody CartInfoBean cartInfoBean) {
		ProductResponse response = new ProductResponse();
		if (service.addCart(cartInfoBean)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Data inserted into the DB");
			
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("Data not inserted into the DB");
		}
		return response;
		
		
	}
	
	@DeleteMapping(path = "/delete/{id}",produces = MediaType.APPLICATION_JSON_VALUE)
	public ProductResponse removeCart(@PathVariable("id") int id) {
		ProductResponse response = new ProductResponse();
		if (service.removeProduct(id)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("record deleted Successfuly");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failure");
			response.setDescription("record  doesn't deleted");
		}
		return response;
		
		
	}
	
}
